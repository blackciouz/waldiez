/**
 * SPDX-License-Identifier: Apache-2.0
 * Copyright 2024 - 2025 Waldiez & contributors
 */
import type { Node } from "@xyflow/react";

import type { WaldiezAgentCommonData } from "@waldiez/models/Agent/Common";
import { WaldiezAgentGroupManagerSpeakers } from "@waldiez/models/Agent/GroupManager/GroupSpeakers";

export type { WaldiezAgentGroupManagerData } from "@waldiez/models/Agent/GroupManager/GroupManagerData";
export type { WaldiezAgentGroupManagerSpeakers } from "@waldiez/models/Agent/GroupManager/GroupSpeakers";

/**
 * The method used to select the speaker in a group chat.
 * @param default - The default method (the connections and their orders are specified by the user).
 * @param auto - The automatic method (the connections and their orders are automatically generated by the group manager).
 * @param manual - The manual method (the user is asked to select the next speaker).
 * @param random - The random method (the next speaker is selected randomly).
 * @param round_robin - The round robin method (the next speaker is selected in a round robin fashion).
 */
export type GroupChatSpeakerSelectionMethodOption = "default" | "auto" | "manual" | "random" | "round_robin"; //| "custom";

/**
 * The mode used to select the speaker in a group chat.
 * It can be one "repeat" or "transition".
 * @param repeat - Specified by whether repetition is allowed or not (or who is allowed to be selected again).
 * @param transition - Custom rules for the transitions between speakers.
 */
export type GroupChatSpeakerSelectionMode = "repeat" | "transition";

/**
 * GroupChatSpeakerTransitionsType
 * The type of transitions for the speaker in a group chat.
 * It can be "allowed" or "disallowed".
 * @param allowed - The transitions are allowed.
 * @param disallowed - The transitions are disallowed.
 */
export type GroupChatSpeakerTransitionsType = "allowed" | "disallowed";

/**
 * WaldiezNodeAgentGroupManagerData
 * The data for the group manager agent.
 * @param maxRound - The maximum number of rounds.
 * @param adminName - The name of the admin.
 * @param speakers - The speakers in the group chat.
 * @param enableClearHistory - Whether to enable clear history.
 * @param sendIntroductions - Whether to send introductions.
 * @param groupName - The name of the group.
 * @param initialAgentId - The ID of the initial agent.
 * @param name - The name of the agent
 * @param description - The description of the agent
 * @param parentId - The parent id of the agent (if in a group)
 * @param agentType - The agent type
 * @param systemMessage - The system message
 * @param humanInputMode - The human input mode
 * @param codeExecutionConfig - The code execution configuration
 * @param agentDefaultAutoReply - The agent default auto reply
 * @param maxConsecutiveAutoReply - The max consecutive auto reply
 * @param termination - The termination message check
 * @param nestedChats - The nested chats
 * @param contextVariables - The context variables
 * @param updateAgentStateBeforeReply - Optional handler to update the agent state before replying
 * @param afterWork - The handoff transition after work
 * @param handoffs - The handoff / edge ids (used for ordering if needed)
 * @param modelIds - The agent's model ids
 * @param tools - The tools available to the agent
 * @param tags - The tags
 * @param requirements - The requirements
 * @param createdAt - The created at date
 * @param updatedAt - The updated at date
 * @see {@link WaldiezNodeAgentType}
 * @see {@link WaldiezAgentHumanInputMode}
 * @see {@link WaldiezAgentCodeExecutionConfig}
 * @see {@link WaldiezAgentTerminationMessageCheck}
 * @see {@link WaldiezAgentNestedChat}
 * @see {@link WaldiezAgentUpdateSystemMessage}
 * @see {@link WaldiezTransitionTarget}
 * @see {@link WaldiezAgentLinkedTool}
 * @see {@link WaldiezAgentUpdateSystemMessage}
 * @see {@link WaldiezAgentGroupManagerSpeakers}
 * @see {@link WaldiezAgentCommonData}
 */
export type WaldiezNodeAgentGroupManagerData = WaldiezAgentCommonData & {
    maxRound: number;
    adminName: string | null;
    speakers: WaldiezAgentGroupManagerSpeakers;
    enableClearHistory?: boolean;
    sendIntroductions?: boolean;
    groupName?: string;
    initialAgentId?: string;
    label: string;
};

/**
 * WaldiezNodeAgentGroupManager
 * The react-flow node component for a group manager agent.
 * @param data - The data of the agent node.
 * @param type - The type of the node (should be "agent").
 * @see {@link WaldiezNodeAgentGroupManagerData}
 */
export type WaldiezNodeAgentGroupManager = Node<WaldiezNodeAgentGroupManagerData, "agent">;
